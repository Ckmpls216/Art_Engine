"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const crypto = __importStar(require("crypto"));
const InputsManager_1 = __importDefault(require("./core/InputsManager"));
const ItemsDataManager_1 = __importDefault(require("./core/ItemsDataManager"));
const PerformanceTracker_1 = __importDefault(require("./core/PerformanceTracker"));
const Logger_1 = __importDefault(require("./core/Logger"));
const package_json_1 = __importDefault(require("./package.json"));
PerformanceTracker_1.default.enable();
Logger_1.default.enable();
const SEED_CACHE_FILE = "seed.json";
class ArtEngine {
    config;
    seed;
    inputsManager;
    itemsDataManager;
    constructor(config) {
        this.config = config;
        this.inputsManager = new InputsManager_1.default();
        this.itemsDataManager = new ItemsDataManager_1.default();
        Logger_1.default.printHero(package_json_1.default.version);
    }
    async load() {
        const timerUid = PerformanceTracker_1.default.trackTask("Loading inputs");
        this.initCache();
        for (const key in this.config.inputs) {
            const input = this.config.inputs[key];
            await input.init({ seed: this.seed });
            this.inputsManager.set(key, await input.load());
        }
        this.inputsManager.freeze();
        // TODO: implement cache
        //this.cache("input.json", this.inputs);
        PerformanceTracker_1.default.endTask(timerUid);
    }
    async generate() {
        const timerUid = PerformanceTracker_1.default.trackTask("Generating");
        for (const generator of this.config.generators) {
            await generator.init({
                seed: this.seed,
                inputsManager: this.inputsManager,
            });
            const itemsAttributes = await generator.generate();
            for (const itemUid in itemsAttributes) {
                this.itemsDataManager.addAttributes(itemUid, itemsAttributes[itemUid]);
            }
        }
        this.itemsDataManager.freezeAttributes();
        PerformanceTracker_1.default.endTask(timerUid);
    }
    async render() {
        const timerUid = PerformanceTracker_1.default.trackTask("Rendering");
        for (const renderer of this.config.renderers) {
            await renderer.init({
                seed: this.seed,
                cachePath: this.config.cachePath,
                attributesGetter: () => this.itemsDataManager.getAttributes(),
            });
            const itemsRenders = await renderer.render();
            for (const itemUid in itemsRenders) {
                this.itemsDataManager.addRenders(itemUid, itemsRenders[itemUid]);
            }
        }
        this.itemsDataManager.freezeRenders();
        PerformanceTracker_1.default.endTask(timerUid);
    }
    async export() {
        const timerUid = PerformanceTracker_1.default.trackTask("Exporting");
        for (const exporter of this.config.exporters) {
            await exporter.init({
                seed: this.seed,
                outputPath: this.config.outputPath,
                rendersGetter: () => this.itemsDataManager.getRenders(),
            });
            await exporter.export();
        }
        PerformanceTracker_1.default.endTask(timerUid);
    }
    async run() {
        console.log("Loading data...");
        await this.load();
        console.log("Generating...");
        await this.generate();
        console.log("Rendering...");
        await this.render();
        console.log("Exporting...");
        await this.export();
        console.log("Done");
    }
    printPerformance() {
        PerformanceTracker_1.default.printRecap();
        PerformanceTracker_1.default.printIncompleteTasks();
    }
    initCache() {
        if (this.seed !== undefined) {
            return;
        }
        if (!fs.existsSync(this.config.cachePath)) {
            fs.mkdirSync(this.config.cachePath);
        }
        const seedFilePath = this.getCachePath(SEED_CACHE_FILE);
        if (fs.existsSync(seedFilePath)) {
            this.seed = JSON.parse(fs.readFileSync(seedFilePath).toString()).seed;
            return;
        }
        const newSeed = crypto.randomBytes(128).toString("hex"); // 256 random chars
        const seedFileDir = path.dirname(seedFilePath);
        fs.mkdirSync(seedFileDir, { recursive: true });
        fs.writeFileSync(seedFilePath, JSON.stringify({ seed: newSeed }, null, 2));
        this.seed = newSeed;
    }
    getCachePath(relativePath) {
        return path.join(this.config.cachePath, relativePath);
    }
}
exports.default = ArtEngine;
